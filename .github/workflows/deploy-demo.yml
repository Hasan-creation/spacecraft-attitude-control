name: Deploy Satellite Demo to GitHub Pages

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyodide-build
        
    - name: Create web demo
      run: |
        mkdir -p web-demo
        
        # Copy only the demo file
        cp demos/satellite_visualization.py web-demo/
        
        # Create HTML wrapper for the demo
        cat > web-demo/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Syst√®me de Contr√¥le d'Attitude Satellite</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(135deg, #0c0c2b 0%, #1a1a3a 100%);
                    color: white;
                    min-height: 100vh;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                }
                h1 {
                    text-align: center;
                    color: #64b5f6;
                    text-shadow: 0 0 10px rgba(100, 181, 246, 0.5);
                    margin-bottom: 30px;
                }
                .demo-section {
                    background: rgba(255, 255, 255, 0.1);
                    border-radius: 15px;
                    padding: 30px;
                    margin-bottom: 30px;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .controls {
                    display: flex;
                    gap: 15px;
                    justify-content: center;
                    margin-bottom: 20px;
                    flex-wrap: wrap;
                }
                button {
                    background: linear-gradient(45deg, #64b5f6, #42a5f5);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 16px;
                    transition: all 0.3s ease;
                    box-shadow: 0 4px 15px rgba(100, 181, 246, 0.3);
                }
                button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(100, 181, 246, 0.4);
                }
                button:disabled {
                    background: #555;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                }
                #canvas {
                    border: 2px solid rgba(100, 181, 246, 0.5);
                    border-radius: 10px;
                    display: block;
                    margin: 0 auto;
                    background: #000;
                }
                .info-panel {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                .info-card {
                    background: rgba(0, 0, 0, 0.3);
                    padding: 20px;
                    border-radius: 10px;
                    border-left: 4px solid #64b5f6;
                }
                .status {
                    font-size: 18px;
                    font-weight: bold;
                    margin-bottom: 10px;
                }
                .description {
                    background: rgba(255, 255, 255, 0.05);
                    padding: 20px;
                    border-radius: 10px;
                    margin-bottom: 20px;
                    line-height: 1.6;
                }
                .feature-list {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                .feature-card {
                    background: rgba(255, 255, 255, 0.08);
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid rgba(100, 181, 246, 0.3);
                }
                .loading {
                    text-align: center;
                    padding: 40px;
                    font-size: 18px;
                    color: #64b5f6;
                }
                .error {
                    color: #ff6b6b;
                    text-align: center;
                    padding: 20px;
                    background: rgba(255, 107, 107, 0.1);
                    border-radius: 10px;
                    border: 1px solid rgba(255, 107, 107, 0.3);
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üõ∞Ô∏è Syst√®me de Contr√¥le d'Attitude Satellite</h1>
                
                <div class="description">
                    <p>Cette d√©monstration interactive pr√©sente un syst√®me avanc√© de contr√¥le d'attitude pour satellites, 
                    utilisant un contr√¥leur PID sophistiqu√© pour maintenir l'orientation d√©sir√©e dans l'espace.</p>
                    
                    <p>Le syst√®me simule les d√©fis r√©els du contr√¥le spatial, incluant les perturbations externes, 
                    l'inertie rotationnelle, et les contraintes physiques des actionneurs.</p>
                </div>

                <div class="demo-section">
                    <div class="controls">
                        <button id="startBtn">üöÄ D√©marrer la Simulation</button>
                        <button id="resetBtn" disabled>üîÑ R√©initialiser</button>
                        <button id="disturbBtn" disabled>‚ö° Perturbation</button>
                        <button id="targetBtn" disabled>üéØ Nouvelle Cible</button>
                    </div>
                    
                    <div id="canvasContainer">
                        <div class="loading">
                            Chargement de l'environnement Python...
                        </div>
                    </div>
                    
                    <div class="info-panel">
                        <div class="info-card">
                            <div class="status">√âtat du Syst√®me</div>
                            <div id="systemStatus">Initialisation...</div>
                        </div>
                        <div class="info-card">
                            <div class="status">Orientation Actuelle</div>
                            <div id="currentOrientation">Roll: 0¬∞, Pitch: 0¬∞, Yaw: 0¬∞</div>
                        </div>
                        <div class="info-card">
                            <div class="status">Erreur d'Orientation</div>
                            <div id="orientationError">0.00¬∞</div>
                        </div>
                        <div class="info-card">
                            <div class="status">Effort de Contr√¥le</div>
                            <div id="controlEffort">0.00</div>
                        </div>
                    </div>
                </div>

                <div class="feature-list">
                    <div class="feature-card">
                        <h3>üéÆ Contr√¥les Interactifs</h3>
                        <ul>
                            <li><strong>ESPACE:</strong> Appliquer une perturbation al√©atoire</li>
                            <li><strong>R:</strong> R√©initialiser la simulation</li>
                            <li><strong>T:</strong> D√©finir une nouvelle cible</li>
                            <li><strong>√âCHAP:</strong> Quitter la simulation</li>
                        </ul>
                    </div>
                    <div class="feature-card">
                        <h3>üìä Visualisations en Temps R√©el</h3>
                        <ul>
                            <li>Orientation 3D du satellite</li>
                            <li>Graphiques de performance</li>
                            <li>Effets de particules des propulseurs</li>
                            <li>Environnement spatial immersif</li>
                        </ul>
                    </div>
                    <div class="feature-card">
                        <h3>üî¨ Physique R√©aliste</h3>
                        <ul>
                            <li>Dynamique rotationnelle</li>
                            <li>Contr√¥leur PID avanc√©</li>
                            <li>Perturbations externes</li>
                            <li>Limitations des actionneurs</li>
                        </ul>
                    </div>
                    <div class="feature-card">
                        <h3>üìà Analyse de Performance</h3>
                        <ul>
                            <li>Tracking d'erreur en temps r√©el</li>
                            <li>Mesure de l'effort de contr√¥le</li>
                            <li>Historique des performances</li>
                            <li>Indicateurs de stabilit√©</li>
                        </ul>
                    </div>
                </div>
            </div>

            <script type="module">
                // Note: Cette version simplifi√©e montre l'interface
                // Pour une d√©monstration compl√®te, PyGame doit √™tre adapt√© pour le web
                
                let isRunning = false;
                
                const startBtn = document.getElementById('startBtn');
                const resetBtn = document.getElementById('resetBtn');
                const disturbBtn = document.getElementById('disturbBtn');
                const targetBtn = document.getElementById('targetBtn');
                const canvasContainer = document.getElementById('canvasContainer');
                
                startBtn.addEventListener('click', () => {
                    if (!isRunning) {
                        startSimulation();
                    }
                });
                
                resetBtn.addEventListener('click', () => {
                    resetSimulation();
                });
                
                disturbBtn.addEventListener('click', () => {
                    applyDisturbance();
                });
                
                targetBtn.addEventListener('click', () => {
                    setNewTarget();
                });
                
                function startSimulation() {
                    isRunning = true;
                    startBtn.textContent = '‚è∏Ô∏è Simulation Active';
                    startBtn.disabled = true;
                    resetBtn.disabled = false;
                    disturbBtn.disabled = false;
                    targetBtn.disabled = false;
                    
                    // Cr√©er un canvas de d√©monstration
                    canvasContainer.innerHTML = `
                        <canvas id="canvas" width="800" height="600"></canvas>
                        <div style="text-align: center; margin-top: 10px; color: #64b5f6;">
                            ‚ö†Ô∏è Version de d√©monstration - Interface utilisateur uniquement<br>
                            Pour la simulation compl√®te, ex√©cutez le code Python localement
                        </div>
                    `;
                    
                    // Simulation basique pour la d√©monstration
                    simulateBasicDemo();
                    
                    document.getElementById('systemStatus').textContent = 'Simulation Active';
                }
                
                function resetSimulation() {
                    document.getElementById('currentOrientation').textContent = 'Roll: 45¬∞, Pitch: 30¬∞, Yaw: -60¬∞';
                    document.getElementById('orientationError').textContent = '75.00¬∞';
                    document.getElementById('controlEffort').textContent = '0.00';
                    document.getElementById('systemStatus').textContent = 'R√©initialis√©';
                }
                
                function applyDisturbance() {
                    const randomRoll = (Math.random() * 60 - 30).toFixed(1);
                    const randomPitch = (Math.random() * 60 - 30).toFixed(1);
                    const randomYaw = (Math.random() * 60 - 30).toFixed(1);
                    
                    document.getElementById('currentOrientation').textContent = 
                        `Roll: ${randomRoll}¬∞, Pitch: ${randomPitch}¬∞, Yaw: ${randomYaw}¬∞`;
                    document.getElementById('systemStatus').textContent = 'Perturbation Appliqu√©e';
                }
                
                function setNewTarget() {
                    const randomRoll = (Math.random() * 60 - 30).toFixed(1);
                    const randomPitch = (Math.random() * 60 - 30).toFixed(1);
                    const randomYaw = (Math.random() * 60 - 30).toFixed(1);
                    
                    document.getElementById('systemStatus').textContent = 
                        `Nouvelle Cible: ${randomRoll}¬∞, ${randomPitch}¬∞, ${randomYaw}¬∞`;
                }
                
                function simulateBasicDemo() {
                    const canvas = document.getElementById('canvas');
                    if (!canvas) return;
                    
                    const ctx = canvas.getContext('2d');
                    let angle = 0;
                    let error = 75;
                    let control = 0;
                    
                    function animate() {
                        if (!isRunning) return;
                        
                        // Fond √©toil√©
                        ctx.fillStyle = 'rgba(5, 5, 15, 0.1)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        
                        // √âtoiles
                        ctx.fillStyle = 'white';
                        for (let i = 0; i < 100; i++) {
                            const x = (i * 67 + angle) % canvas.width;
                            const y = (i * 83) % canvas.height;
                            const brightness = Math.sin(angle * 0.01 + i) * 0.5 + 0.5;
                            ctx.globalAlpha = brightness * 0.8;
                            ctx.fillRect(x, y, 1, 1);
                        }
                        ctx.globalAlpha = 1;
                        
                        // Terre
                        const earthX = 150;
                        const earthY = canvas.height - 150;
                        const earthRadius = 80;
                        
                        const gradient = ctx.createRadialGradient(earthX, earthY, 0, earthX, earthY, earthRadius);
                        gradient.addColorStop(0, '#4A90E2');
                        gradient.addColorStop(0.7, '#2E5BBA');
                        gradient.addColorStop(1, '#1E3A8A');
                        
                        ctx.fillStyle = gradient;
                        ctx.beginPath();
                        ctx.arc(earthX, earthY, earthRadius, 0, Math.PI * 2);
                        ctx.fill();
                        
                        // Satellite au centre
                        const satX = canvas.width / 2;
                        const satY = canvas.height / 2;
                        
                        ctx.save();
                        ctx.translate(satX, satY);
                        ctx.rotate(angle * 0.02);
                        
                        // Corps du satellite
                        ctx.fillStyle = '#C0C0C0';
                        ctx.fillRect(-20, -15, 40, 30);
                        ctx.strokeStyle = '#808080';
                        ctx.lineWidth = 2;
                        ctx.strokeRect(-20, -15, 40, 30);
                        
                        // Panneaux solaires
                        ctx.fillStyle = '#1E3A8A';
                        ctx.fillRect(-60, -8, 35, 16);
                        ctx.fillRect(25, -8, 35, 16);
                        
                        // Axes de r√©f√©rence
                        ctx.lineWidth = 3;
                        
                        // Axe X (rouge)
                        ctx.strokeStyle = '#FF6B6B';
                        ctx.beginPath();
                        ctx.moveTo(0, 0);
                        ctx.lineTo(40, 0);
                        ctx.stroke();
                        
                        // Axe Y (vert)
                        ctx.strokeStyle = '#4ECDC4';
                        ctx.beginPath();
                        ctx.moveTo(0, 0);
                        ctx.lineTo(0, -40);
                        ctx.stroke();
                        
                        ctx.restore();
                        
                        // Simulation de contr√¥le
                        if (error > 1) {
                            error *= 0.995;
                            control = Math.sin(angle * 0.1) * 2 + 3;
                        } else {
                            control *= 0.9;
                        }
                        
                        // Mise √† jour des valeurs
                        document.getElementById('orientationError').textContent = error.toFixed(2) + '¬∞';
                        document.getElementById('controlEffort').textContent = control.toFixed(2);
                        
                        angle += 1;
                        requestAnimationFrame(animate);
                    }
                    
                    animate();
                }
                
                // Initialisation
                document.getElementById('systemStatus').textContent = 'Pr√™t √† d√©marrer';
            </script>
        </body>
        </html>
        EOF
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./web-demo

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
